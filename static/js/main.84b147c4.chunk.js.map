{"version":3,"sources":["Components/Spiner/Spiner.module.scss","Components/ContactForm/ContactForm.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","Components/ContactForm/contactForm.container.js","Components/ContactList/ContactListItem/ContactListItem.js","Components/ContactList/ContactListItem/ContactListItem.container.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/Filter/Filter.container.js","Components/Container/Container.js","Components/Spiner/Spiner.js","App.js","redux/store.js","index.js"],"names":["module","exports","ContactForm","state","name","number","onInputChange","e","currentTarget","value","setState","handleSubmit","preventDefault","normalizedName","toLocaleLowerCase","props","contacts","some","contact","alert","onSubmit","reset","className","this","onChange","type","pattern","title","required","Component","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","a","get","data","addContact","post","deleteContact","id","delete","getFilter","filter","getAllContacts","items","contactsSelectors","getLoading","loading","getError","error","getVisibleContacts","createSelector","allContacts","normalizedFilter","includes","createReducer","_","payload","combineReducers","connect","obj","ContactListItem","onDelete","map","onClick","ContactList","Filter","target","Container","children","Spiner","isLoading","style","Loader","color","height","width","visible","App","isLoadingContacts","message","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84b147c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spiner_Loader__1V6-Y\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  onInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const normalizedName = this.state.name.toLocaleLowerCase();\r\n    this.props.contacts.some(\r\n      contact => contact.name.toLocaleLowerCase() === normalizedName,\r\n    )\r\n      ? alert(`${this.state.name} is already in contacts`)\r\n      : this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"ContactForm\" onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            className=\"ContactForm__input\"\r\n            onChange={this.onInputChange}\r\n            value={this.state.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            className=\"ContactForm__input\"\r\n            onChange={this.onInputChange}\r\n            value={this.state.number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className=\"submit__btn\" onChange={this.onSubmit} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nconst contactsOperations = { fetchContacts, addContact, deleteContact };\r\nexport default contactsOperations;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getError = state => state.contacts.error;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLocaleLowerCase();\r\n    return allContacts.filter(contact =>\r\n      contact.name.toLocaleLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nconst contactsSelectors = {\r\n  getLoading,\r\n  getError,\r\n  getFilter,\r\n  getAllContacts,\r\n  getVisibleContacts,\r\n};\r\n\r\nexport default contactsSelectors;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n\r\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContactsError]: (_, { payload }) => payload,\r\n  [addContactError]: (_, { payload }) => payload,\r\n  [deleteContactError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { connect } from 'react-redux';\r\n\r\nimport ContactForm from './ContactForm';\r\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: obj => dispatch(contactsOperations.addContact(obj)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ContactListItem.scss';\r\n\r\nconst ContactListItem = ({ contacts, onDelete }) =>\r\n  contacts.map(({ id, name, number }) => (\r\n    <li className=\"ContactListItem\" key={id}>\r\n      <span className=\"ContactListItem__data\">\r\n        {name}: {number}\r\n      </span>\r\n\r\n      <button\r\n        className=\"delete__btn\"\r\n        onClick={() => onDelete(id)}\r\n        type=\"button\"\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  ));\r\n\r\nContactListItem.propTypes = {\r\n  onDelete: PropTypes.func.isRequired,\r\n\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import { connect } from 'react-redux';\nimport ContactListItem from './ContactListItem';\nimport { contactsOperations, contactsSelectors } from '../../../redux/contacts';\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from 'react';\r\n\r\nimport ContactListItem from './ContactListItem';\r\nimport './ContactList.scss';\r\n\r\nconst ContactList = () => (\r\n  <ul className=\"ContactList\">{<ContactListItem />}</ul>\r\n);\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find your contacts by name\r\n    <input\r\n      className=\"Filter__input\"\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\nexport default Filter;\r\n","import { connect } from 'react-redux';\nimport Filter from './Filter';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Container.scss';\r\n\r\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nimport style from './Spiner.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Spiner extends Component {\r\n  render() {\r\n    const { isLoading } = this.props;\r\n    return (\r\n      <Loader\r\n        className={style.Loader}\r\n        type=\"BallTriangle\"\r\n        color=\"#00BFFF\"\r\n        height={80}\r\n        width={80}\r\n        visible={isLoading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nSpiner.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Spiner;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport ContactForm from './Components/ContactForm';\nimport ContactList from './Components/ContactList';\nimport Filter from './Components/Filter';\nimport Container from './Components/Container';\nimport Spiner from './Components/Spiner';\nimport { contactsOperations, contactsSelectors } from './redux/contacts';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { isLoadingContacts, error } = this.props;\n    return (\n      <Container>\n        {error ? (\n          <p>Whoops, something went wrong: {error.message}</p>\n        ) : (\n          <>\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            <Spiner isLoading={isLoadingContacts} />\n            <ContactList />\n          </>\n        )}\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n  error: contactsSelectors.getError(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport { contactsReducer } from './contacts';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './styles/base.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}